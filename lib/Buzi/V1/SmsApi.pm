=begin comment

Swagger Petstore - OpenAPI 3.0

This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

The version of the OpenAPI document: 1.0.0
Contact: edson@michaque.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package Buzi::V1::SmsApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use Buzi::V1::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'Buzi::V1::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = Buzi::V1::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# cancel_message
#
# Cancel a message
#
# @param int $message_id ID of pet to return (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'ID of pet to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cancel_message' } = {
        summary => 'Cancel a message',
        params => $params,
        returns => 'Message',
        };
}
# @return Message
#
sub cancel_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling cancel_message");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/messages/{messageId}/cancel';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "messageId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Message', $response);
    return $_response_object;
}

#
# create_message
#
# Create Message
#
# @param CreateMessageInput $create_message_input Update an existent pet in the store (required)
{
    my $params = {
    'create_message_input' => {
        data_type => 'CreateMessageInput',
        description => 'Update an existent pet in the store',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_message' } = {
        summary => 'Create Message',
        params => $params,
        returns => 'Message',
        };
}
# @return Message
#
sub create_message {
    my ($self, %args) = @_;

    # verify the required parameter 'create_message_input' is set
    unless (exists $args{'create_message_input'}) {
      croak("Missing the required parameter 'create_message_input' when calling create_message");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/messages';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'create_message_input'}) {
        $_body_data = $args{'create_message_input'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Message', $response);
    return $_response_object;
}

#
# create_pricing
#
# Create network price
#
# @param int $network_id  (required)
{
    my $params = {
    'network_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'create_pricing' } = {
        summary => 'Create network price',
        params => $params,
        returns => 'Message',
        };
}
# @return Message
#
sub create_pricing {
    my ($self, %args) = @_;

    # verify the required parameter 'network_id' is set
    unless (exists $args{'network_id'}) {
      croak("Missing the required parameter 'network_id' when calling create_pricing");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/networks/{networkId}/pricing';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'network_id'}) {
        my $_base_variable = "{" . "networkId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Message', $response);
    return $_response_object;
}

#
# delete_message
#
# Deletes a message
#
# @param int $message_id Pet id to delete (required)
# @param string $api_key  (optional)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'Pet id to delete',
        required => '1',
    },
    'api_key' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_message' } = {
        summary => 'Deletes a message',
        params => $params,
        returns => 'Error',
        };
}
# @return Error
#
sub delete_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling delete_message");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/messages/{messageId}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'api_key'}) {
        $header_params->{'api_key'} = $self->{api_client}->to_header_value($args{'api_key'});
    }

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "messageId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Error', $response);
    return $_response_object;
}

#
# get_message
#
# Get message
#
# @param int $message_id ID of pet to return (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'ID of pet to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_message' } = {
        summary => 'Get message',
        params => $params,
        returns => 'Message',
        };
}
# @return Message
#
sub get_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling get_message");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/messages/{messageId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "messageId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Message', $response);
    return $_response_object;
}

#
# get_network
#
# Get network
#
# @param int $network_id  (required)
# @param int $country_code ID of pet to return (optional)
{
    my $params = {
    'network_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    'country_code' => {
        data_type => 'int',
        description => 'ID of pet to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_network' } = {
        summary => 'Get network',
        params => $params,
        returns => 'Network',
        };
}
# @return Network
#
sub get_network {
    my ($self, %args) = @_;

    # verify the required parameter 'network_id' is set
    unless (exists $args{'network_id'}) {
      croak("Missing the required parameter 'network_id' when calling get_network");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/networks/{networkId}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'country_code'}) {
        $query_params->{'country_code'} = $self->{api_client}->to_query_value($args{'country_code'});
    }

    # path params
    if ( exists $args{'network_id'}) {
        my $_base_variable = "{" . "networkId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Network', $response);
    return $_response_object;
}

#
# get_pricing
#
# List network rates
#
# @param int $network_id  (required)
{
    my $params = {
    'network_id' => {
        data_type => 'int',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pricing' } = {
        summary => 'List network rates',
        params => $params,
        returns => 'ARRAY[Pricing]',
        };
}
# @return ARRAY[Pricing]
#
sub get_pricing {
    my ($self, %args) = @_;

    # verify the required parameter 'network_id' is set
    unless (exists $args{'network_id'}) {
      croak("Missing the required parameter 'network_id' when calling get_pricing");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/networks/{networkId}/pricing';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'network_id'}) {
        my $_base_variable = "{" . "networkId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'network_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Pricing]', $response);
    return $_response_object;
}

#
# list_messages
#
# List messages
#
# @param string $inbox  (optional)
# @param string $status  (optional)
{
    my $params = {
    'inbox' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_messages' } = {
        summary => 'List messages',
        params => $params,
        returns => 'ARRAY[Message]',
        };
}
# @return ARRAY[Message]
#
sub list_messages {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/sms/messages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'inbox'}) {
        $query_params->{'inbox'} = $self->{api_client}->to_query_value($args{'inbox'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Message]', $response);
    return $_response_object;
}

#
# list_networks
#
# List networks
#
# @param string $country_code ID of pet to return (optional)
{
    my $params = {
    'country_code' => {
        data_type => 'string',
        description => 'ID of pet to return',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_networks' } = {
        summary => 'List networks',
        params => $params,
        returns => 'ARRAY[Network]',
        };
}
# @return ARRAY[Network]
#
sub list_networks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/sms/networks';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'country_code'}) {
        $query_params->{'country_code'} = $self->{api_client}->to_query_value($args{'country_code'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Network]', $response);
    return $_response_object;
}

#
# send_message
#
# Sends a message
#
# @param int $message_id ID of pet to return (required)
{
    my $params = {
    'message_id' => {
        data_type => 'int',
        description => 'ID of pet to return',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'send_message' } = {
        summary => 'Sends a message',
        params => $params,
        returns => 'Message',
        };
}
# @return Message
#
sub send_message {
    my ($self, %args) = @_;

    # verify the required parameter 'message_id' is set
    unless (exists $args{'message_id'}) {
      croak("Missing the required parameter 'message_id' when calling send_message");
    }

    # parse inputs
    my $_resource_path = '/v1/sms/messages/{messageId}/send';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'message_id'}) {
        my $_base_variable = "{" . "messageId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'message_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth BasicAuth BearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Message', $response);
    return $_response_object;
}

1;
